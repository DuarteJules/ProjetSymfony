<?php

namespace App\Tests\Unit;

use App\Entity\Candidate;
use App\Entity\Company;
use App\Entity\Job;
use App\Entity\Skill;
use App\Service\MatchingService;
use PHPUnit\Framework\TestCase;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class BasicTest extends KernelTestCase
{

    private $matchingService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $kernel = $this->bootKernel();
        $container = $kernel->getContainer();
        $this->matchingService = $container->get(MatchingService::class);

    }

    public function testSomething(): void
    {
        $this->assertTrue(true);
//1 create a company
        $company = new Company();
        $company->setName('apple');
        //2 create 2 jobs for this company
        $job = new Job();
        $job->setName('offer one');
        $job->setCompany($company);
        $skill = new Skill();
        $skill->setName("git");
        $job->addSkill($skill);

        $job2 = new Job();

        //3 create a candidate with skills
        $candidate = new Candidate();
        $candidate->setName('foub');
        $CanSkill = new Skill();
        $CanSkill->setName('git');
        $candidate->addSkill($CanSkill);
        //4 run the matcher service
        //- recuperer le service MatcherService

        $result = $this->matchingService->matching([$job, $job2], $candidate);

        self::assertEquals($result[0], $job);
        //$results = $matchingService->match($jobs, $candidates);
        // assert que le resultat contient bien le jobX pour le candidat Y
        // verifier le r√©sultat

        #new candidat/ new offre

        # appel service matching
    }
}